{"version":3,"sources":["App.js","index.js"],"names":["accessKey","process","App","useState","images","setImages","page","setPage","query","setQuery","getPhotos","useCallback","apiUrl","fetch","then","res","json","data","imagesFromApi","results","useEffect","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","length","next","hasMore","loader","map","image","index","href","links","html","rel","key","src","urls","regular","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAIMA,G,MAAYC,+CAEH,SAASC,IAAO,IAAD,EAEAC,mBAAS,IAFT,mBAErBC,EAFqB,KAEbC,EAFa,OAGJF,mBAAS,GAHL,mBAGrBG,EAHqB,KAGfC,EAHe,OAIFJ,mBAAS,IAJP,mBAIrBK,EAJqB,KAIdC,EAJc,KAMtBC,EAAYC,uBAAY,WAC5B,IAAIC,EAAM,mCACNJ,IAAOI,EAAM,uDAAmDJ,IAEpEI,GAAM,gBAAaN,GACnBM,GAAM,qBAAkBZ,GAExBa,MAAMD,GACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAAU,IAAD,EACRC,EAAa,UAAGD,EAAKE,eAAR,QAAmBF,EAStCZ,EANa,IAATC,EAMM,SAACF,GAAD,4BAAgBA,GAAhB,YAA2Bc,KALzBA,QAOhB,CAACZ,EAAME,IAqBT,OAbAY,qBAAU,WACRV,MACC,CAACJ,EAAMI,IAYR,yBAAKW,UAAU,OACb,uDAEA,0BAAMC,SAvBW,SAACC,GACpBA,EAAEC,iBACFjB,EAAQ,GACRG,MAqBI,2BACEe,KAAK,OACLC,YAAY,qBACZC,MAAOnB,EACPoB,SAAU,SAACL,GAAD,OAAOd,EAASc,EAAEM,OAAOF,UAErC,2CAEF,kBAAC,IAAD,CACEG,WAAY1B,EAAO2B,OACnBC,KAAM,kBAAMzB,GAAQ,SAACD,GAAD,OAAUA,EAAO,MACrC2B,SAAS,EACTC,OAAQ,2CAER,yBAAKb,UAAU,cACZjB,EAAO+B,KAAI,SAACC,EAAOC,GAAR,OACV,uBACEC,KAAMF,EAAMG,MAAMC,KAClBnB,UAAU,QACVQ,OAAO,SACPY,IAAI,sBACJC,IAAKL,GAEL,yBAAKM,IAAKP,EAAMQ,KAAKC,QAASC,IAAKV,EAAMW,yBC9EvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.17423354.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './App.css';\n\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n\nexport default function App() {\n\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState('');\n\n  const getPhotos = useCallback(() => {\n    let apiUrl = `https://api.unsplash.com/photos?`;\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`;\n\n    apiUrl += `&page=${page}`;\n    apiUrl += `&client_id=${accessKey}`;\n\n    fetch(apiUrl)\n      .then(res => res.json())\n      .then((data) => {\n        const imagesFromApi = data.results ?? data;\n\n        // if page is 1, then we need a whole new array of images\n        if (page === 1) {\n          setImages(imagesFromApi);\n          return;\n        }\n\n        // if page is greater then 1, then we are adding\n        setImages((images) => [...images, ...imagesFromApi])\n      })\n  },[page, query])\n\n  const searchPhotos = (e) => {\n    e.preventDefault();\n    setPage(1);\n    getPhotos();\n  }\n\n  useEffect(() => {\n    getPhotos();\n  }, [page, getPhotos])\n\n  // return an error if there is no access key\n  if (!accessKey) {\n    return (\n      <a href=\"https://unsplash.com/developers\" className=\"error\">\n        Required: Get Your Unsplash API Key First\n      </a>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Unsplash Image Gallery!</h1>\n\n      <form onSubmit={searchPhotos}>\n        <input\n          type=\"text\"\n          placeholder=\"Search Unsplash...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n      <InfiniteScroll\n        dataLength={images.length} //This is important field to render the next data\n        next={() => setPage((page) => page + 1)}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        <div className=\"image-grid\">\n          {images.map((image, index) => (\n            <a\n              href={image.links.html}\n              className=\"image\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              key={index}\n            >\n              <img src={image.urls.regular} alt={image.alt_description}/>\n            </a>\n          ))}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}